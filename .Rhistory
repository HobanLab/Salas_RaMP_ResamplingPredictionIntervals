x <- resultsArray[,,i]
plot(x)
}
par(mfrow=c(4,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x)
}
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x)
}
par(mfrow=c(4,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x)
}
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x)
}
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x,
)
y <- speciesMat[,i,i]
}
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x,
)
y <- speciesMat[,i,]
}
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x,
)
}
for (i in 1:14) {
browser()
x <- resultsArray[,,i]
plot(x,
)
}
resultsArray[,,i]
str(resultsArray)
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x,
)
}
for (i in 1:14) {
for (j in 1:nrow(final_quercus_results)) {
x <- speciesMat[i,j,j]
}
plot(x)
}
for (i in 1:14) {
for (j in 1:nrow(final_quercus_results)) {
x <- speciesMat[i,,]
plot(x)
}
plot(x)
}
x <- resultsArray[j,,i]
for (i in 1:14) {
for (j in 1:nrow(final_quercus_results)) {
x <- resultsArray[j,,i]
plot(x)
}
plot(x)
}
for (i in 1:14) {
for (j in 1:nrow(final_quercus_results)) {
x <- resultsArray[j,,i]
plot(x)
}
plot(x)
}
for (i in 1:14) {
for (j in 1:nrow(final_quercus_results)) {
x <- resultsArray[j,,i]
plot(x)
}
d
f
1
2
asdfas
for (i in 1:14) {
for (j in 1:nrow(final_quercus_results)) {
x <- resultsArray[j,,i]
plot(x)
}
wsfr
for (i in 1:14) {
for (j in 1:nrow(final_quercus_results)) {
x <- resultsArray[j,,i]
plot(x)
}
sdf
asdf
sdf
plot(x)
1111111
Q
w
<>
for (i in 1:14) {
x <- speciesMat[,,i]
plot(x)
}
for (i in 1:14) {
x <- speciesMat[,,i]
plot(x)
}
x
for (i in 1:14) {
x <- speciesMat[,,i]
plot(x)
}
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x)
}
par(mfrow=c(3,2))
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x)
}
x
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[1])
}
resultsArray
resultsArray[1]
resultsArray[1,,1]
for (i in 1:14) {
x <- resultsArray[500,,i]
plot(x[,,])
}
resultsArray[500,,1]
resultsArray[1:500,,1]
for (i in 1:14) {
x <- resultsArray[1:500,,i]
plot(x[,,])
}
for (i in 1:14) {
x <- resultsArray[1:500,1:1000,i]
plot(x)
}
resultsArray[1:500,1:1000,1]
for (i in 1:14) {
x <- resultsArray[1:500,,i]
plot(x)
}
resultsArray[1:500,,1]
resultsArray[1:500,,2]
for (i in 1:14) {
x <- resultsArray[1:500,1:500,i]
plot(x)
}
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x)
}
resultsArray[1:500,,2]
x <- resultsArray[1:500,,2]
x
x[1:500]
x[1:500,1:500,1:500]
plot(x[1:500])
x[1:500,]
x[1:500,]
x[1:500,,]
x[1:500]
x[,x:500]
x[,1:500]
x[,1:nrow()]
resultsArray[1:500,,2]
x <- resultsArray[,,2]
x
x[1:50]
x[,1:50]
x <- resultsArray[,,1]
x
x[,]
x[1:500]
plot(x[1:500,,])
plot(x[1:500])
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[1:500])
}
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[1:500])
}
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[1:500], ylim = c(0,1))
}
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[1:500], ylim = c(0,1))
}
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[1:500], ylim = c(0,1))
}
resultsArray
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2])
lines(x[,3])
}
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2])
lines(x[,3])
}
resultsArray[,,9]
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,,1], ylim = c(0,1))
lines(x[,2])
lines(x[,3])
}
for (i in 1:14) {
plot(resultsArray[,1,i])
lines(resultsArray[,2,i])
lines(resultsArray[,3,i])
}
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2])
lines(x[,3])
}
# Using (min(which(meanRepValues > 0.95))) ; correct (we think)
# we're plotting the 95% MSEE for the *average* representation values across replicates
# we do NOT need to specify range in vector
# also, notice we can the meanRepValues from earlier to the function for efficiency
# declare vectors
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,1])
upper95[n] <- quantile(final_quercus_results[n,,1],0.95)
lower95[n] <- quantile(final_quercus_results[n,,1],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
resultsArray <- array(dim = c(500,3,14))
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
}
str(resultsArray)
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2])
lines(x[,3])
}
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
plot(resultsArray[,1,q])
lines(resultsArray[,2,q])
lines(resultsArray[,3,q])
}
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
str(resultsArray)
par(mfrow=c(3,2))
plot(resultsArray[,1,q])
lines(resultsArray[,2,q])
lines(resultsArray[,3,q])
}
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
for (j in 1:14) {
par(mfrow=c(3,2))
plot(resultsArray[,1,j])
lines(resultsArray[,2,j])
lines(resultsArray[,3,j])
}
}
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
for (j in 1:14) {
par(mfrow=c(3,2))
plot(resultsArray[,1,j])
lines(resultsArray[,2,j])
lines(resultsArray[,3,j])
}
}
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
par(mfrow=c(3,2))
for (j in 1:14) {
plot(resultsArray[,1,j])
lines(resultsArray[,2,j])
lines(resultsArray[,3,j])
}
}
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
par(mfrow=c(3,2))
for (j in 1:14) {
plot(resultsArray[,1,j])
lines(resultsArray[,2,j])
lines(resultsArray[,3,j])
}
}
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
par(mfrow=c(3,2))
plot(resultsArray[,1,q])
lines(resultsArray[,2,q])
lines(resultsArray[,3,q])
}
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
}
str(resultsArray)
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2])
lines(x[,3])
}
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
}
str(resultsArray)
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2], col = "red",lwd = 2, lty = "dashed")
lines(x[,3], col = "orange",lwd = 2, lty = "dashed")
}
for (i in 1:14) {
plot(resultsArray[,1,i])
lines(resultsArray[,2,i])
lines(resultsArray[,3,i])
abline(h = 0.95, lty = "dotted", col = "orange")
}
str(resultsArray)
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2], col = "red",lwd = 2, lty = "dashed")
lines(x[,3], col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
}
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2], col = "red",lwd = 2, lty = "dashed")
lines(x[,3], col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(x[1] > 0.95)), lty = "dotted", col = "orange")
}
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2], col = "red",lwd = 2, lty = "dashed")
lines(x[,3], col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(x[,1] > 0.95)), lty = "dotted", col = "orange")
}
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2], col = "red",lwd = 2, lty = "dashed")
lines(x[,3], col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(x[,1] > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
}
