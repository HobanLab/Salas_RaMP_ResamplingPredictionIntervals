# TO DO: put the calculation of the CI width here!!!
# You'll have to change the dimensions of the resultsArray
# (4 columns, instead of 3)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
}
upper95spp[1:50]
str(resultsArray)
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2], col = "red",lwd = 2, lty = "dashed")
lines(x[,3], col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(x[,1] > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
}
# width of CI
upper95s <-resultsArray[1:500,2,]
str(upper95s)
lower95s <- resultsArray[1:500,3,]
str(lower95s)
width <- upper95s - lower95s
str(width)
par(mfrow=c(2,3))
meanCI <- vector()
for (i in 1:14) {
plot(x=1:nrow(resultsArray), y = width[,i], pch=16)
meanCI[i] <- mean(width[,i])
}
meanCI
matrix(meanCI, nrow=14)
matrix(width[25,1:14])
matrix(width[50,1:14])
matrix(width[100,1:14])
matrix(width[200,1:14])
# plot(x=1:nrow(resultsArray), y=width[,1], pch=16)
# for (i in 1:14) {
#   plot(resultsArray[,1,i])
#   lines(resultsArray[,2,i])
#   lines(resultsArray[,3,i])
# }
# for (q in 1:14) {
#   for (n in 1:nrow(final_quercus_results)) {
#     resultsArray[n,,q] <- c(matrix(cbind(mean(final_quercus_results[n,,q]),
#     quantile(final_quercus_results[n,,q],0.95),
#     quantile(final_quercus_results[n,,q],0.05), dim = c(n,1000,q))))
#   }
# }
# for (q in 1:14) {
#   for (n in 1:nrow(final_quercus_results)) {
#     matrix[n] <- matrix(cbind(mean(final_quercus_results[n,,q]),
#                  quantile(final_quercus_results[n,,q],0.95),
#                  quantile(final_quercus_results[n,,q],0.05),500,3))
#     resultsArray[,,q] <- array(c(matrix[n]), dim = c(500,3,q))
#   }
# }
# meansppvalue
#
#
# resultsArray
#
# mean95 <- list()
# for(a in 1:nrow(final_quercus_results)){
#   mean95[[a]] <- mean(final_quercus_results[a,,1])
# }
# # creates a vector from the list so we can find min sample size
# unlist(mean95)
# # function to more efficiently find min 0.95 value?
#
# abline(v = 191, lty = "dotted", col = "orange")
#
#
# abline(v = mean(min_samp95), lty ="dotted", col = "orange")
# Examine dimensions of the dataset
dim(final_quercus_results)
# Amount of genetic diversity from a sample size of random individuals ranging between one to five hundred
# for one thousand replicates of species one
final_quercus_results[,,1]
# This represents the amount of genetic diversity for a sample size of
# random individuals [ranging between one to one hundred, for one replicate, of species one].
final_quercus_results[1:100,1,1]
# This represents the amount of genetic diversity for a sample size of
# one random individual replicated one hundred times for species one.
final_quercus_results[1,1:100,1]
# Set work directory by adding path file
setwd("C:/Users/gsalas/Documents/resampling_CIs/Code/")
# This represents the amount of genetic diversity for a sample size of
# random individuals [ranging between one to one hundred, for one replicate, of species one].
final_quercus_results[1:100,1,1]
# This represents the amount of genetic diversity for a sample size of
# random individuals [ranging between one to one hundred, for one replicate, of species one].
final_quercus_results[1:100,1,1]
# This represents the amount of genetic diversity for a sample size of
# one random individual replicated one hundred times for species one.
final_quercus_results[1,1:100,1]
# This plot displays genetic diversity of all sample sizes for
# one replicate of species one in blue and all sample sizes for one replicate
# of species two in red.
plot(final_quercus_results[,1,1],col="blue")
points(final_quercus_results[,1,2],col="red")
# This plot displays genetic diversity of all sample sizes for
# one replicate of species one in blue and all sample sizes for one replicate
# of species two in red.
plot(final_quercus_results[,1,1],col="blue")
points(final_quercus_results[,1,2],col="red")
# This plot displays the genetic diversity of samples the size of
# one individual for all the replicates of species two
plot(final_quercus_results[1,,2])
plot(final_quercus_results[,1,sp])
# we made a for loop alternative for the apply() function
apply(final_quercus_results[,,1],1,mean)
dim(final_quercus_results)
lines(apply(final_quercus_results[,,sp],1,mean),col="red",lwd=2)
# (loop alt) assign a variable to the vector to eventually capture all the means across the replicates
meanRepValues <- vector()
# nrow is soft code that detects how many rows there are in an object
# we use it to get the amount of genetic diversity across replicates
# we then set an index for e in order to get a mean.
for(i in 1:nrow(final_quercus_results)){
meanRepValues[i] <- mean(final_quercus_results[i,,1])
}
# mean genetic diversity across all replicates for species 1
meanRepValues
# graph of meanRepvalues
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues)
leg.txt1 = c("Total Mean Genetic Diversity")
legend(250, 0.7, legend = leg.txt1,
fill = c("black"))
# graph of genetic diversity, replicates 1 - 3 are plotted along with a line showing the tmean gd
plot(xlab = "Sample size", ylab = "Genetic Diversity", final_quercus_results[,1,1])
points(final_quercus_results[,2,1], col="blue")
points(final_quercus_results[,3,1], col="green")
# recall this is the average and the above points are the individual replicates plotted on one graph
lines(meanRepValues, col="red", lwd=2)
leg.txt2 <- c("Replicate 1", "Replicate 2", "Replicate 3", "Total Mean of Genetic Diversity")
legend(200, 0.7, legend = leg.txt2,
fill = c("black","blue","green","red"))
leg.txt2 <- c("Replicate 1", "Replicate 2", "Replicate 3", "Total Mean of Genetic Diversity", pch = 16)
# graph of genetic diversity, replicates 1 - 3 are plotted along with a line showing the tmean gd
plot(xlab = "Sample size", ylab = "Genetic Diversity", final_quercus_results[,1,1], pch = 16)
points(final_quercus_results[,2,1], col="blue")
points(final_quercus_results[,3,1], col="green")
points(final_quercus_results[,2,1], col="blue", pch = 16)
points(final_quercus_results[,3,1], col="green", pch = 16)
# recall this is the average and the above points are the individual replicates plotted on one graph
lines(meanRepValues, col="red", lwd=2)
leg.txt2 <- c("Replicate 1", "Replicate 2", "Replicate 3", "Total Mean of Genetic Diversity")
legend(200, 0.7, legend = leg.txt2,
fill = c("black","blue","green","red"))
# we made a for loop alternative for the apply() function
apply(final_quercus_results[,,1],1,mean)
# we made a for loop alternative for the apply() function
apply(final_quercus_results[,,1],2,mean)
apply(final_quercus_results[,,1],1,mean)
plot(final_quercus_results[,1,sp])
lines(apply(final_quercus_results[,,sp],1,mean),col="red",lwd=2)
# (loop alt) assign a variable to the vector to eventually capture all the means across the replicates
meanRepValues <- vector()
# nrow is soft code that detects how many rows there are in an object
# we use it to get the amount of genetic diversity across replicates
# we then set an index for e in order to get a mean.
for(i in 1:nrow(final_quercus_results)){
meanRepValues[i] <- mean(final_quercus_results[i,,1])
}
# mean genetic diversity across all replicates for species 1
meanRepValues
final_quercus_results[,,sp],1,mean
apply(final_quercus_results[,,sp],1,mean)
meanRepValues == apply(final_quercus_results[,,sp],1,mean)
meanRepValues = apply(final_quercus_results[,,sp],1,mean)
meanRepValues == apply(final_quercus_results[,,sp],1,mean)
# graph of meanRepvalues
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues)
leg.txt1 = c("Total Mean Genetic Diversity")
legend(250, 0.7, legend = leg.txt1,
fill = c("black"))
# graph of genetic diversity, replicates 1 - 3 are plotted along with a line showing the tmean gd
plot(xlab = "Sample size", ylab = "Genetic Diversity", final_quercus_results[,1,1], pch = 16)
points(final_quercus_results[,2,1], col="blue", pch = 16)
points(final_quercus_results[,3,1], col="green", pch = 16)
# recall this is the average and the above points are the individual replicates plotted on one graph
lines(meanRepValues, col="red", lwd=2)
leg.txt2 <- c("Replicate 1", "Replicate 2", "Replicate 3", "Total Mean of Genetic Diversity")
legend(200, 0.7, legend = leg.txt2,
fill = c("black","blue","green","red"))
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
resultsArray <- array(dim = c(500,3,14))
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
# TO DO: put the calculation of the CI width here!!!
# You'll have to change the dimensions of the resultsArray
# (4 columns, instead of 3)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
}
upper95spp[1:50]
str(resultsArray)
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2], col = "red",lwd = 2, lty = "dashed")
lines(x[,3], col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(x[,1] > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
}
# distribution of 95% min sample sizes across replicates for species one
# not what we quite want however...
plot(xlab = "Replicate number", ylab = "95% minimum sample size", min_samp95)
leg.txt3 <- "Sample size"
legend(650, 250, legend = leg.txt3,
fill = c("black"))
# distribution of 95% min sample sizes across replicates for species one
# not what we quite want however...
plot(xlab = "Replicate number", ylab = "95% minimum sample size", min_samp95)
leg.txt3 <- "Sample size"
legend(650, 250, legend = leg.txt3,
fill = c("black"))
# IDEA 2
p<-1
# this shows the genetic diversity value in 95 percentile of the values across the replicates for a sample size of one for species one
quantile(final_quercus_results[p,,1],0.95)
quantile(final_quercus_results[p,,1],.05)
p<-2
quantile(final_quercus_results[p,,1],.95);
quantile(final_quercus_results[p,,1],.05)
# Using (min(which(meanRepValues > 0.95))) ; correct (we think)
# we're plotting the 95% MSEE for the *average* representation values across replicates
# we do NOT need to specify range in vector
# also, notice we can the meanRepValues from earlier to the function for efficiency
# declare vectors
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,1])
upper95[n] <- quantile(final_quercus_results[n,,1],0.95)
lower95[n] <- quantile(final_quercus_results[n,,1],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,1])
upper95[n] <- quantile(final_quercus_results[n,,1],0.95)
lower95[n] <- quantile(final_quercus_results[n,,1],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,1])
upper95[n] <- quantile(final_quercus_results[n,,1],0.95)
lower95[n] <- quantile(final_quercus_results[n,,1],0.05)
}
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,1])
upper95[n] <- quantile(final_quercus_results[n,,1],0.95)
lower95[n] <- quantile(final_quercus_results[n,,1],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2], col = "red",lwd = 2, lty = "dashed")
lines(x[,3], col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(x[,1] > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
}
for (i in 1:14) {
plot(x=1:nrow(resultsArray), y = width[,i], pch=16)
meanCI[i] <- mean(width[,i])
}
?png()
pdf(file="14plots.pdf", width = 9, height = 7.5)
for (i in 1:14) {
plot(x=1:nrow(resultsArray), y = width[,i], pch=16)
meanCI[i] <- mean(width[,i])
}
dev.off()
par(mfrow=c(2,3))
pdf(file="14plots.pdf", width = 9, height = 7.5)
for (i in 1:14) {
plot(x=1:nrow(resultsArray), y = width[,i], pch=16)
meanCI[i] <- mean(width[,i])
}
dev.off()
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
CIwidth <- upper95spp - lower95spp
# TO DO: put the calculation of the CI width here!!!
# You'll have to change the dimensions of the resultsArray
# (4 columns, instead of 3)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp, CIwidth)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
}
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
CIwidth[i] <- upper95spp[i] - lower95spp[i]
# TO DO: put the calculation of the CI width here!!!
# You'll have to change the dimensions of the resultsArray
# (4 columns, instead of 3)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp, CIwidth)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
}
str(CIwidth)
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
resultsArray <- array(dim = c(500,4,14))
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
CIwidth <- vector()
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
CIwidth[i] <- upper95spp[i] - lower95spp[i]
# TO DO: put the calculation of the CI width here!!!
# You'll have to change the dimensions of the resultsArray
# (4 columns, instead of 3)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp, CIwidth)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
}
str(CIwidth)
str(speciesMat)
resultsArray
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
resultsArray <- array(dim = c(500,4,14))
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
CIwidth <- vector()
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
CIwidth[i] <- upper95spp - lower95spp
# TO DO: put the calculation of the CI width here!!!
# You'll have to change the dimensions of the resultsArray
# (4 columns, instead of 3)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp, CIwidth)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
}
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
resultsArray <- array(dim = c(500,4,14))
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
CIwidth <- upper95spp - lower95spp
# TO DO: put the calculation of the CI width here!!!
# You'll have to change the dimensions of the resultsArray
# (4 columns, instead of 3)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp, CIwidth)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
}
str(CIwidth)
str(resultsArray)
str(resultsArray)
upper95spp[1:50]
str(speciesMat)
str(resultsArray)
resultsArray
par(mfrow=c(2,3))
meanCI <- vector()
for (i in 1:14) {
plot(x=1:nrow(resultsArray), y = width[,i], pch=16)
meanCI[i] <- mean(width[,i])
}
par(mfrow=c(3,2))
for (i in 1:14) {
x <- resultsArray[,,i]
plot(x[,1], ylim = c(0,1))
lines(x[,2], col = "red",lwd = 2, lty = "dashed")
lines(x[,3], col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(x[,1] > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
}
CIwidth
resultsArray
for (q in 1:14) {
for (i in 1:nrow(final_quercus_results)) {
#
meansppvalue[i] <- mean(final_quercus_results[i,,q])
upper95spp[i] <- quantile(final_quercus_results[i,,q],0.95)
lower95spp[i] <- quantile(final_quercus_results[i,,q],0.05)
CIwidth <- upper95spp - lower95spp
# TO DO: put the calculation of the CI width here!!!
# You'll have to change the dimensions of the resultsArray
# (4 columns, instead of 3)
}
# Bind vectors together into a matrix
speciesMat <- cbind(meansppvalue, upper95spp, lower95spp, CIwidth)
# Pass the matrix into a slot of the array
resultsArray[,,q] <- speciesMat
}
str(CIwidth)
str(meansppvalue)
upper95spp
str(resultsArray)
resultsArray
# width of CI
upper95s <-resultsArray[1:500,2,]
str(upper95s)
lower95s <- resultsArray[1:500,3,]
width <- upper95s - lower95s
width
str(width)
resultsArray[1:500,2,]
resultsArray
width[1]
width[1:50]
width[1:50,1]
width[1:50,2]
width[1:50,1:2]
resultsArray[1:500,4,1] == width[1:500,1]
resultsArray[1:500,4,1:14] == width[1:500,1:14]
resultsArray[1:500,4,1:14] == width[1:500,1:14]
resultsArray[1:500,4,1:14] != width[1:500,1:14]
