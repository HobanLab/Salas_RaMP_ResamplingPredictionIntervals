lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,1])
upper95[n] <- quantile(final_quercus_results[n,,1],0.95)
lower95[n] <- quantile(final_quercus_results[n,,1],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
# Using (min(which(meanRepValues > 0.95))) ; correct (we think)
# we're plotting the 95% MSEE for the *average* representation values across replicates
# we do NOT need to specify range in vector
# also, notice we can the meanRepValues from earlier to the function for efficiency
# declare vectors
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,1])
upper95[n] <- quantile(final_quercus_results[n,,1],0.95)
lower95[n] <- quantile(final_quercus_results[n,,1],0.05)
}
##########################################
# 2023/08/01 Exploring Resampling Dataset#
##########################################
setwd("C:/Users/gsalas/Documents/resampling_CIs/Code/")
load("Datasets/quercus_final_results_orig.Rdata")
dim(final_quercus_results)
final_quercus_results[,,1]
# This represents samples in a matrix of 1-100 for one replicate of one species.
final_quercus_results[1:100,1,1]
# This represents one randomly selected sample replicated one hundred times for one species.
final_quercus_results[1,1:100,1]
# This represents one hundred randomly selected samples
final_quercus_results[1:100,1,2]
# this plot displays
plot(final_quercus_results[,1,1],col="blue"); points(final_quercus_results[,1,2],col="red")
plot(final_quercus_results[1,,2])
# this gives us the mean genetic diversity values for a range of sample sizes,
# range of replicates, and species' along the rows(lines 30 - 35 show how Kaylee did her work)
sp <- 1
# we made a for loop alternative for the apply() function
apply(final_quercus_results[,,1],1,mean)
dim(final_quercus_results)
plot(final_quercus_results[,1,sp])
lines(apply(final_quercus_results[,,sp],1,mean),col="red",lwd=2)
# (loop alt) assign a variable to the vector to eventually capture all the means across the replicates
meanRepValues <- vector()
# nrow is soft code that detects how many rows there are in an object
# we use it to get the amount of genetic diversity across replicates
# we then set an index for e in order to get a mean.
for(i in 1:nrow(final_quercus_results)){
meanRepValues[i] <- mean(final_quercus_results[i,,1])
}
# mean genetic diversity across all replicates for species 1
meanRepValues
# graph of e
plot(xlab = "Sample Size", ylab = "Genetic Diversity", e)
leg.txt1 = c("Total Mean Genetic Diversity")
legend(250, 0.7, legend = leg.txt1,
fill = c("black"))
# graph of genetic diversity, replicates 1 - 3 are plotted along with a line showing the tmean gd
plot(xlab = "Sample size", ylab = "Genetic Diversity", final_quercus_results[,1,1])
points(final_quercus_results[,2,1], col="blue")
points(final_quercus_results[,3,1], col="green")
# recall this is the average and the above points are the individual replicates plotted on one graph
lines(meanRepValues, col="red", lwd=2)
leg.txt2 <- c("Replicate 1", "Replicate 2", "Replicate 3", "Total Mean of Genetic Diversity")
legend(200, 0.7, legend = leg.txt2,
fill = c("black","blue","green","red"))
# get the 95% CI of plot, but first go thru these ideas
# IDEA 1
# this gives us the position in the vector of the min genetic diversity value greater than 0.95 in replicate 1 of species 1
min(which(final_quercus_results[,1,sp]>0.95))
# this gives us the minimum sample size across all replicates
sp<-1; min_samp95<-vector(length = 1000)
for (r in 1:1000) {
min_samp95[r]<-min(which(final_quercus_results[,r,sp]>0.95))
}
min_samp95
#this gives mean across reps of the first individual to cross 95%
boxplot(min_samp95)
mean(min_samp95)
# distribution of 95% min sample sizes across replicates for species one
# not what we quite want however...
plot(xlab = "Replicate number", ylab = "95% minimum sample size", min_samp95)
leg.txt3 <- "Sample size"
legend(650, 250, legend = leg.txt3,
fill = c("black"))
# IDEA 2
p<-1
# this shows the genetic diversity value in 95 percentile of the values across the replicates for a sample size of one for species one
quantile(final_quercus_results[p,,1],0.95)
quantile(final_quercus_results[p,,1],.05)
p<-2
quantile(final_quercus_results[p,,1],.95);
quantile(final_quercus_results[p,,1],.05)
# MSSE = minimum sample size estimate
# Using mean(min_samp95) ; incorrect (we think)
# we're plotting the average of the 95% MSSE for each replicate
# Using (min(which(meanRepValues > 0.95))) ; correct (we think)
# we're plotting the 95% MSEE for the *average* representation values across replicates
# we do NOT need to specify range in vector
# also, notice we can the meanRepValues from earlier to the function for efficiency
# declare vectors
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,1])
upper95[n] <- quantile(final_quercus_results[n,,1],0.95)
lower95[n] <- quantile(final_quercus_results[n,,1],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppalue[n] <- mean(final_quercus_results[n,,q])
upper95[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- mean(final_quercus_results[n,,q])
upper95[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
plot(meansppvalue)
meansppvalue
upper95spp
lines(upper95spp)
plot(meansppvalue)
lines(upper95spp)
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- mean(final_quercus_results[n,,q])
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
plot(meansppvalue)
upper95spp <- vector()
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- mean(final_quercus_results[n,,q])
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
plot(meansppvalue)
line(upper95spp)
lines(upper95spp)
lines(lower95spp)
upper95spp
plot(meansppvalue)
lines(upper95spp)
lines(lower95spp)
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- mean(final_quercus_results[n,,q])
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
plot(meansppvalue)
plot(meansppvalue[,,3])
plot(meansppvalue)
length(meansppvalue)
cbind(meansppvalue)
cbind(meansppvalue[,,1:14])
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
cbind(meansppvalue[n]) <- mean(final_quercus_results[n,,q])
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- mean(final_quercus_results[n,,q])
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
cbind(meansppvalue[,,1:14])
rbind(meansppvalue)
cbind(meansppvalue)
?cbind
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
cbind(meansppvalue <- vector())
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- mean(final_quercus_results[n,,q])
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
meansppvalue
cbind(meansppvalue <- vector())
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- mean(final_quercus_results[n,,q])
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
meansppvalue
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- cbind(mean(final_quercus_results[n,,q]))
upper95spp[n] <- cbind(quantile(final_quercus_results[n,,q],0.95))
lower95spp[n] <- cbind(quantile(final_quercus_results[n,,q],0.05))
}
}
meansppvalue
plot(meansppvalue)
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,2])
upper95[n] <- quantile(final_quercus_results[n,,2],0.95)
lower95[n] <- quantile(final_quercus_results[n,,2],0.05)
}
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,2])
upper95[n] <- quantile(final_quercus_results[n,,2],0.95)
lower95[n] <- quantile(final_quercus_results[n,,2],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,1])
upper95[n] <- quantile(final_quercus_results[n,,1],0.95)
lower95[n] <- quantile(final_quercus_results[n,,1],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,2])
upper95[n] <- quantile(final_quercus_results[n,,2],0.95)
lower95[n] <- quantile(final_quercus_results[n,,2],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,2])
upper95[n] <- quantile(final_quercus_results[n,,2],0.95)
lower95[n] <- quantile(final_quercus_results[n,,2],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,1])
upper95[n] <- quantile(final_quercus_results[n,,1],0.95)
lower95[n] <- quantile(final_quercus_results[n,,1],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,2])
upper95[n] <- quantile(final_quercus_results[n,,2],0.95)
lower95[n] <- quantile(final_quercus_results[n,,2],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
min(which(meanRepValues > 0.95))
min(which(meanRepValues < 0.95)
min(which(meanRepValues < 0.95)
in(which(meanRepValues < 0.95))
min(which(meanRepValues < 0.95))
min(which(meanRepValues > 0.95)
meanRepValues <- vector()
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,2])
upper95[n] <- quantile(final_quercus_results[n,,2],0.95)
lower95[n] <- quantile(final_quercus_results[n,,2],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,3])
upper95[n] <- quantile(final_quercus_results[n,,3],0.95)
lower95[n] <- quantile(final_quercus_results[n,,3],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
cbind(for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- mean(final_quercus_results[n,,q])
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
})
meansppvalue
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- mean(final_quercus_results[n,,q])
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- cbind(mean(final_quercus_results[n,,q]))
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
meansppvalue
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
cbind(meansppvalue[n]) <- mean(final_quercus_results[n,,q])
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
cbind(meansppvalue[n] <- mean(final_quercus_results[n,,q]))
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
meansppvalue
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
meansppvalue <- cbind(vector())
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- mean(final_quercus_results[n,,q])
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
meansppvalue
plot(meansppvalue)
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
meansppvalue <- rbind(vector())
upper95spp <- vector()
lower95spp <- vector()
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- mean(final_quercus_results[n,,q])
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
meansppvalue
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
meansppvalue <- vector()
upper95spp <- vector()
lower95spp <- vector()
for (q in 1:14) {
for (n in 1:nrow(final_quercus_results)) {
meansppvalue[n] <- mean(final_quercus_results[n,,q])
upper95spp[n] <- quantile(final_quercus_results[n,,q],0.95)
lower95spp[n] <- quantile(final_quercus_results[n,,q],0.05)
}
}
meanRepValues <- vector()
upper95 <- vector()
lower95 <- vector()
for (n in 1:nrow(final_quercus_results)) {
meanRepValues[n] <- mean(final_quercus_results[n,,3])
upper95[n] <- quantile(final_quercus_results[n,,3],0.95)
lower95[n] <- quantile(final_quercus_results[n,,3],0.05)
}
# add the lines to the legend, add an asymptote of 0.95 horizontal, and add the line at which sample size reaches the 0.95 benchmark vertically
plot(xlab = "Sample Size", ylab = "Genetic Diversity", meanRepValues, ylim = c(0,1))
leg.txt4 = c("Total Mean Genetic Diversity", "95% Upper Limit", "95% Lower Limit")
lines(upper95, col = "red",lwd = 2, lty = "dashed")
lines(lower95, col = "green",lwd = 2, lty = "dashed")
abline(h = 0.95, lty = "dotted", col = "orange")
abline(v = min(which(meanRepValues > 0.95)), lty = "dotted", col = "orange")
legend(250, 0.7, legend = leg.txt4,
fill = c("black", "red", "green"))
meanRepValues
upper95
lower95
cbind(meansppvalue, upper95spp, lower95spp)
# now, we want to declare a higher dimension object for the 14 slices (spp.) of the array for the 3 vectors
resultsArray <- array(dim = 3)
